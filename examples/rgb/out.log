Inspecting Store:	  store ptr %0, ptr %3, align 8
Store value operand is not LoadInst
Inspecting Store:	  store ptr %1, ptr %4, align 8
Store value operand is not LoadInst
Inspecting Store:	  store i32 %11, ptr %5, align 4
Store value operand is not LoadInst
Inspecting Store:	  store i32 %12, ptr %6, align 4
Considering load:	  %12 = load i32, ptr %5, align 4
Analysing Ptr Operand:	  %5 = alloca i32, align 4
Cannot create CoalLoad.
Inspecting Store:	  store i32 %19, ptr %25, align 4
Considering load:	  %19 = load i32, ptr %18, align 4
Analysing Ptr Operand:	  %18 = getelementptr inbounds i32, ptr %13, i64 %17
GEP source starts:	  %13 = load ptr, ptr %4, align 8	offset starts:	  %17 = sext i32 %16 to i64
root:	  %17 = sext i32 %16 to i64
root:	  %16 = add nsw i32 %15, 0
root:	  %15 = mul nsw i32 3, %14
root:	i32 3
root:	  %14 = load i32, ptr %5, align 4
root:	  %5 = alloca i32, align 4
root:	  %11 = add i32 %9, %10
root:	  %9 = mul i32 %7, %8
root:	  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
root:	  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
root:	  %10 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
GEP offset
└──  %17 = sext i32 %16 to i64		Expr: (0 + ((ThreadIndex + (BlockDim * BlockIndex)) * 3))
            ├──  %16 = add nsw i32 %15, 0		Expr: (0 + ((ThreadIndex + (BlockDim * BlockIndex)) * 3))
            |            ├──i32 0		Expr: 0
            |            └──  %15 = mul nsw i32 3, %14		Expr: ((ThreadIndex + (BlockDim * BlockIndex)) * 3)
            |                        ├──  %14 = load i32, ptr %5, align 4		Expr: (ThreadIndex + (BlockDim * BlockIndex))
            |                        |            ├──  %11 = add i32 %9, %10		Expr: (ThreadIndex + (BlockDim * BlockIndex))
            |                        |            |            ├──  %10 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()		Expr: ThreadIndex
            |                        |            |            └──  %9 = mul i32 %7, %8		Expr: (BlockDim * BlockIndex)
            |                        |            |                        ├──  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()		Expr: BlockDim
            |                        |            |                        └──  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()		Expr: BlockIndex
            |                        └──i32 3		Expr: 3
computeSrcPtrDependenceTree Root:   %13 = load ptr, ptr %4, align 8
computeSrcPtrDependenceTree Root:   %4 = alloca ptr, align 8
computeSrcPtrDependenceTree Root: ptr %1
Source GEP:	  %18 = getelementptr inbounds i32, ptr %13, i64 %17
└──  %13 = load ptr, ptr %4, align 8		Expr: Arg 
            ├──ptr %1		Expr: Arg 
store value op resolved after createCoalLoadOrNo.
Analysing Ptr Operand:	  %25 = getelementptr inbounds i32, ptr %20, i64 %24
GEP source starts:	  %20 = load ptr, ptr %3, align 8	offset starts:	  %24 = sext i32 %23 to i64
root:	  %24 = sext i32 %23 to i64
root:	  %23 = add nsw i32 %22, 0
root:	  %22 = mul nsw i32 3, %21
root:	i32 3
root:	  %21 = load i32, ptr %5, align 4
root:	  %5 = alloca i32, align 4
root:	  %11 = add i32 %9, %10
root:	  %9 = mul i32 %7, %8
root:	  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
root:	  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
root:	  %10 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
GEP offset
└──  %24 = sext i32 %23 to i64		Expr: (0 + ((ThreadIndex + (BlockDim * BlockIndex)) * 3))
            ├──  %23 = add nsw i32 %22, 0		Expr: (0 + ((ThreadIndex + (BlockDim * BlockIndex)) * 3))
            |            ├──i32 0		Expr: 0
            |            └──  %22 = mul nsw i32 3, %21		Expr: ((ThreadIndex + (BlockDim * BlockIndex)) * 3)
            |                        ├──  %21 = load i32, ptr %5, align 4		Expr: (ThreadIndex + (BlockDim * BlockIndex))
            |                        |            ├──  %11 = add i32 %9, %10		Expr: (ThreadIndex + (BlockDim * BlockIndex))
            |                        |            |            ├──  %10 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()		Expr: ThreadIndex
            |                        |            |            └──  %9 = mul i32 %7, %8		Expr: (BlockDim * BlockIndex)
            |                        |            |                        ├──  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()		Expr: BlockDim
            |                        |            |                        └──  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()		Expr: BlockIndex
            |                        └──i32 3		Expr: 3
computeSrcPtrDependenceTree Root:   %20 = load ptr, ptr %3, align 8
computeSrcPtrDependenceTree Root:   %3 = alloca ptr, align 8
computeSrcPtrDependenceTree Root: ptr %0
Source GEP:	  %25 = getelementptr inbounds i32, ptr %20, i64 %24
└──  %20 = load ptr, ptr %3, align 8		Expr: Arg 
            ├──ptr %0		Expr: Arg 
store pointer op resolved.
Inspecting Store:	  store i32 %32, ptr %38, align 4
Considering load:	  %32 = load i32, ptr %31, align 4
Analysing Ptr Operand:	  %31 = getelementptr inbounds i32, ptr %26, i64 %30
GEP source starts:	  %26 = load ptr, ptr %4, align 8	offset starts:	  %30 = sext i32 %29 to i64
root:	  %30 = sext i32 %29 to i64
root:	  %29 = add nsw i32 %28, 1
root:	  %28 = mul nsw i32 3, %27
root:	i32 3
root:	  %27 = load i32, ptr %5, align 4
root:	  %5 = alloca i32, align 4
root:	  %11 = add i32 %9, %10
root:	  %9 = mul i32 %7, %8
root:	  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
root:	  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
root:	  %10 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
GEP offset
└──  %30 = sext i32 %29 to i64		Expr: (1 + ((ThreadIndex + (BlockDim * BlockIndex)) * 3))
            ├──  %29 = add nsw i32 %28, 1		Expr: (1 + ((ThreadIndex + (BlockDim * BlockIndex)) * 3))
            |            ├──i32 1		Expr: 1
            |            └──  %28 = mul nsw i32 3, %27		Expr: ((ThreadIndex + (BlockDim * BlockIndex)) * 3)
            |                        ├──  %27 = load i32, ptr %5, align 4		Expr: (ThreadIndex + (BlockDim * BlockIndex))
            |                        |            ├──  %11 = add i32 %9, %10		Expr: (ThreadIndex + (BlockDim * BlockIndex))
            |                        |            |            ├──  %10 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()		Expr: ThreadIndex
            |                        |            |            └──  %9 = mul i32 %7, %8		Expr: (BlockDim * BlockIndex)
            |                        |            |                        ├──  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()		Expr: BlockDim
            |                        |            |                        └──  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()		Expr: BlockIndex
            |                        └──i32 3		Expr: 3
computeSrcPtrDependenceTree Root:   %26 = load ptr, ptr %4, align 8
computeSrcPtrDependenceTree Root:   %4 = alloca ptr, align 8
computeSrcPtrDependenceTree Root: ptr %1
Source GEP:	  %31 = getelementptr inbounds i32, ptr %26, i64 %30
└──  %26 = load ptr, ptr %4, align 8		Expr: Arg 
            ├──ptr %1		Expr: Arg 
store value op resolved after createCoalLoadOrNo.
Analysing Ptr Operand:	  %38 = getelementptr inbounds i32, ptr %33, i64 %37
GEP source starts:	  %33 = load ptr, ptr %3, align 8	offset starts:	  %37 = sext i32 %36 to i64
root:	  %37 = sext i32 %36 to i64
root:	  %36 = add nsw i32 %35, 1
root:	  %35 = mul nsw i32 3, %34
root:	i32 3
root:	  %34 = load i32, ptr %5, align 4
root:	  %5 = alloca i32, align 4
root:	  %11 = add i32 %9, %10
root:	  %9 = mul i32 %7, %8
root:	  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
root:	  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
root:	  %10 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
GEP offset
└──  %37 = sext i32 %36 to i64		Expr: (1 + ((ThreadIndex + (BlockDim * BlockIndex)) * 3))
            ├──  %36 = add nsw i32 %35, 1		Expr: (1 + ((ThreadIndex + (BlockDim * BlockIndex)) * 3))
            |            ├──i32 1		Expr: 1
            |            └──  %35 = mul nsw i32 3, %34		Expr: ((ThreadIndex + (BlockDim * BlockIndex)) * 3)
            |                        ├──  %34 = load i32, ptr %5, align 4		Expr: (ThreadIndex + (BlockDim * BlockIndex))
            |                        |            ├──  %11 = add i32 %9, %10		Expr: (ThreadIndex + (BlockDim * BlockIndex))
            |                        |            |            ├──  %10 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()		Expr: ThreadIndex
            |                        |            |            └──  %9 = mul i32 %7, %8		Expr: (BlockDim * BlockIndex)
            |                        |            |                        ├──  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()		Expr: BlockDim
            |                        |            |                        └──  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()		Expr: BlockIndex
            |                        └──i32 3		Expr: 3
computeSrcPtrDependenceTree Root:   %33 = load ptr, ptr %3, align 8
computeSrcPtrDependenceTree Root:   %3 = alloca ptr, align 8
computeSrcPtrDependenceTree Root: ptr %0
Source GEP:	  %38 = getelementptr inbounds i32, ptr %33, i64 %37
└──  %33 = load ptr, ptr %3, align 8		Expr: Arg 
            ├──ptr %0		Expr: Arg 
store pointer op resolved.
Inspecting Store:	  store i32 %45, ptr %51, align 4
Considering load:	  %45 = load i32, ptr %44, align 4
Analysing Ptr Operand:	  %44 = getelementptr inbounds i32, ptr %39, i64 %43
GEP source starts:	  %39 = load ptr, ptr %4, align 8	offset starts:	  %43 = sext i32 %42 to i64
root:	  %43 = sext i32 %42 to i64
root:	  %42 = add nsw i32 %41, 2
root:	  %41 = mul nsw i32 3, %40
root:	i32 3
root:	  %40 = load i32, ptr %5, align 4
root:	  %5 = alloca i32, align 4
root:	  %11 = add i32 %9, %10
root:	  %9 = mul i32 %7, %8
root:	  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
root:	  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
root:	  %10 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
GEP offset
└──  %43 = sext i32 %42 to i64		Expr: (2 + ((ThreadIndex + (BlockDim * BlockIndex)) * 3))
            ├──  %42 = add nsw i32 %41, 2		Expr: (2 + ((ThreadIndex + (BlockDim * BlockIndex)) * 3))
            |            ├──i32 2		Expr: 2
            |            └──  %41 = mul nsw i32 3, %40		Expr: ((ThreadIndex + (BlockDim * BlockIndex)) * 3)
            |                        ├──  %40 = load i32, ptr %5, align 4		Expr: (ThreadIndex + (BlockDim * BlockIndex))
            |                        |            ├──  %11 = add i32 %9, %10		Expr: (ThreadIndex + (BlockDim * BlockIndex))
            |                        |            |            ├──  %10 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()		Expr: ThreadIndex
            |                        |            |            └──  %9 = mul i32 %7, %8		Expr: (BlockDim * BlockIndex)
            |                        |            |                        ├──  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()		Expr: BlockDim
            |                        |            |                        └──  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()		Expr: BlockIndex
            |                        └──i32 3		Expr: 3
computeSrcPtrDependenceTree Root:   %39 = load ptr, ptr %4, align 8
computeSrcPtrDependenceTree Root:   %4 = alloca ptr, align 8
computeSrcPtrDependenceTree Root: ptr %1
Source GEP:	  %44 = getelementptr inbounds i32, ptr %39, i64 %43
└──  %39 = load ptr, ptr %4, align 8		Expr: Arg 
            ├──ptr %1		Expr: Arg 
store value op resolved after createCoalLoadOrNo.
Analysing Ptr Operand:	  %51 = getelementptr inbounds i32, ptr %46, i64 %50
GEP source starts:	  %46 = load ptr, ptr %3, align 8	offset starts:	  %50 = sext i32 %49 to i64
root:	  %50 = sext i32 %49 to i64
root:	  %49 = add nsw i32 %48, 2
root:	  %48 = mul nsw i32 3, %47
root:	i32 3
root:	  %47 = load i32, ptr %5, align 4
root:	  %5 = alloca i32, align 4
root:	  %11 = add i32 %9, %10
root:	  %9 = mul i32 %7, %8
root:	  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
root:	  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
root:	  %10 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
GEP offset
└──  %50 = sext i32 %49 to i64		Expr: (2 + ((ThreadIndex + (BlockDim * BlockIndex)) * 3))
            ├──  %49 = add nsw i32 %48, 2		Expr: (2 + ((ThreadIndex + (BlockDim * BlockIndex)) * 3))
            |            ├──i32 2		Expr: 2
            |            └──  %48 = mul nsw i32 3, %47		Expr: ((ThreadIndex + (BlockDim * BlockIndex)) * 3)
            |                        ├──  %47 = load i32, ptr %5, align 4		Expr: (ThreadIndex + (BlockDim * BlockIndex))
            |                        |            ├──  %11 = add i32 %9, %10		Expr: (ThreadIndex + (BlockDim * BlockIndex))
            |                        |            |            ├──  %10 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()		Expr: ThreadIndex
            |                        |            |            └──  %9 = mul i32 %7, %8		Expr: (BlockDim * BlockIndex)
            |                        |            |                        ├──  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()		Expr: BlockDim
            |                        |            |                        └──  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()		Expr: BlockIndex
            |                        └──i32 3		Expr: 3
computeSrcPtrDependenceTree Root:   %46 = load ptr, ptr %3, align 8
computeSrcPtrDependenceTree Root:   %3 = alloca ptr, align 8
computeSrcPtrDependenceTree Root: ptr %0
Source GEP:	  %51 = getelementptr inbounds i32, ptr %46, i64 %50
└──  %46 = load ptr, ptr %3, align 8		Expr: Arg 
            ├──ptr %0		Expr: Arg 
store pointer op resolved.
Inspecting Store:	  store i32 %56, ptr %6, align 4
Store value operand is not LoadInst
<<<<<<<<<<<<<<<<<<	All CoalStores	>>>>>>>>>>>>>>>>>>
  store i32 %19, ptr %25, align 4	has potential to be coalesced.
Value Source from Load:	Ptr Source: [Arg ]	Ptr Offset: [Stride = 3]	[StrideOffset = 0]	[GlobalTID]

Ptr Dest of Store:
Ptr Source: [Arg ]	ptr %0
Ptr Offset: [Stride = 3]	[StrideOffset = 0]	[GlobalTID]
------------------------------------
  store i32 %32, ptr %38, align 4	has potential to be coalesced.
Value Source from Load:	Ptr Source: [Arg ]	Ptr Offset: [Stride = 3]	[StrideOffset = 1]	[GlobalTID]

Ptr Dest of Store:
Ptr Source: [Arg ]	ptr %0
Ptr Offset: [Stride = 3]	[StrideOffset = 1]	[GlobalTID]
------------------------------------
  store i32 %45, ptr %51, align 4	has potential to be coalesced.
Value Source from Load:	Ptr Source: [Arg ]	Ptr Offset: [Stride = 3]	[StrideOffset = 2]	[GlobalTID]

Ptr Dest of Store:
Ptr Source: [Arg ]	ptr %0
Ptr Offset: [Stride = 3]	[StrideOffset = 2]	[GlobalTID]
------------------------------------
<<<<<<<<<<<<<<<<<<	All CoalStores Ends	>>>>>>>>>>>>>>>>>>
